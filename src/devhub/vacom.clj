(ns devhub.pp-scripts.vacom
  (:require [devhub.pp-utils :as ppu]
            [clojure.string :as string]
            [devhub.utils :as u]))

(def cmd-20-10
    [0xA5 0x50 0x00 0x00
     0x20 0x10 ;; request actual value
     0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x00 0x00 0x00 0x00 0x00 0x00
     0xFF 0x8C])

(comment
  (def b
    [0xA5 0x50 0x00 0x00
     0x20 0x10 ;; request actual value
     0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x00 0x00 0x00 0x00 0x00 0x00
     0xFF 0x8C])
  ;; answer
  (def v [165 112 0 0 32 16
          51 46 54 50 48 53 53 54 69 45 48 50 0 0 0 0 87 248])
  
  (def b
    [0xA5 0x50 0x00 0x00
     0x01 0x00 ;; type string
     0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
     0x00 0x00 0x00 0x00 0x00 0x00
     0x69 0xEF])
    
  (def a [ 0xA5 0x70 0x00 0x00 0x01 0x00
          0x41 0x74 0x6D 0x69 0x67 0x72 0x61 0x66 0x31 0x30 0x30 ; atmigraf100
          0x00 0x00 0x00 0x00 0x00 0xC8 0xCE]))


(defn meas-pressure [task]
  (assoc task :Value [(byte-array cmd-20-10)]))


(defn string-payload [v] (subvec v 6 18))

(defn payload->string [v] (string/join (map (comp str char) v)))

(defn extract-value [s]
  (let [r #"[+-]*[0-9]*\.[0-9]*[E][-+][0-9]*"]
     (re-matches r s)))

(comment
  (defn read-pressure
    [task]
  (let [input (:PostScriptInput task)
        v      (:_x task)
        o     (ppu/operable v)]
    (merge task {:Result [(ppu/vl-result (:Type input) (ppu/calc-seq v o) "DCR")]})))
  )
